{"version":3,"sources":["../../server/routes/api.js"],"names":["router","express","Router","route","get","req","res","next","send","headers","username","password","status","db","User","findOne","where","prospect","token","jwt","sign","id","expiresIn","verifiedUser","use","membersRouter","module","exports"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;AAGA,IAAMA,SAASC,kBAAQC,MAAR,EAAf;;AAEAF,OAAOG,KAAP,CAAa,GAAb,EACGC,GADH,CACO,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACvB,SAAOD,IAAIE,IAAJ,gBAAP;AACD,CAHH;;AAKAR,OAAOG,KAAP,CAAa,QAAb,EACGC,GADH;AAAA,qEACO,iBAAOC,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,2BAICF,IAAII,OAJL,EAEDC,QAFC,gBAEDA,QAFC,EAGDC,QAHC,gBAGDA,QAHC;;AAAA,kBAKA,CAACD,QAAD,IAAa,CAACC,QALd;AAAA;AAAA;AAAA;;AAAA,6CAK+BL,IAAIM,MAAJ,CAAW,GAAX,EAAgBJ,IAAhB,CAAqB,qBAArB,CAL/B;;AAAA;AAAA;AAAA,mBAMoBK,iBAAGC,IAAH,CAAQC,OAAR,CAAgB,EAACC,OAAM,EAACN,UAAUA,QAAX,EAAqBC,UAAUA,QAA/B,EAAP,EAAhB,CANpB;;AAAA;AAMGM,oBANH;;AAAA,gBAOCA,QAPD;AAAA;AAAA;AAAA;;AAAA,6CAOkBX,IAAIM,MAAJ,CAAW,GAAX,EAAgBJ,IAAhB,CAAqB,qBAArB,CAPlB;;AAAA;AASGU,iBATH,GASWC,uBAAIC,IAAJ,CAAS;AACrBV,wBAAUO,SAASP,QADE;AAErBW,kBAAIJ,SAASI;AAFQ,aAAT,EAId,QAJc,EAKd;AACEC,yBAAW;AADb,aALc,CATX;AAiBGC,wBAjBH,GAiBkB;AACnBF,kBAAIJ,SAASI,EADM;AAEnBX,wBAAUO,SAASP,QAFA;AAGnBQ;AAHmB,aAjBlB;AAAA,6CAuBIZ,IAAIM,MAAJ,CAAW,GAAX,EAAgBJ,IAAhB,CAAqBe,YAArB,CAvBJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GADP;;AAAA;AAAA;AAAA;AAAA;;AA4BAvB,OAAOwB,GAAP,CAAW,UAAX,EAAuBC,iBAAvB;AACAC,OAAOC,OAAP,GAAiB3B,MAAjB","file":"api.js","sourcesContent":["import express from 'express'\nimport jwt from 'jsonwebtoken'\nimport membersRouter from './members'\nimport db from '../models'\n\n\nconst router = express.Router()\n\nrouter.route('/')\n  .get((req, res, next) => {\n    return res.send(`I am the API`);\n  })\n\nrouter.route('/login')\n  .get(async (req, res, next) => {\n    const {\n      username,\n      password\n    } = req.headers\n    if(!username || !password) return res.status(401).send(\"Unauthorized Access\")\n    const prospect = await db.User.findOne({where:{username: username, password: password}})\n    if(!prospect) return res.status(401).send(\"Unauthorized Access\")\n\n    const token = jwt.sign({\n      username: prospect.username,\n      id: prospect.id\n    },\n    'secret',\n    {\n      expiresIn: '24h'\n    })\n    const verifiedUser = {\n      id: prospect.id,\n      username: prospect.username,\n      token,\n    }\n\n    return res.status(200).send(verifiedUser)\n  })\n\n\nrouter.use('/members', membersRouter)\nmodule.exports = router\n"]}